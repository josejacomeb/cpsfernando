
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * File:   main.cpp
 * Author: Fernando Jácome
 *
 * Created on July 9, 2018, 12:55 PM
 */


#include "sio_client.h"                 //Librería de Sockets io
#include "base64.h"                     //Libreria para transformar strings a base64
#include <functional>                   //Librerías estándar
#include <iostream>
#include <thread>                       //Librerías de Multriprocesamiento
#include <mutex>
#include <condition_variable>
#include <string>                       //Librerías de cadena de caracteres
#include <sstream>
#include <fstream>                      //Libreria para abrir archivos
#include <vector>                       //Manejo de vectores
#include <chrono>                       //Libreria para fecha y año
#include <cstdlib>
#include <stdio.h>
#include <errno.h>
#include "ArduinoJson.h"                //Libreria para el Manejo de Cadenas Json en C++


#ifdef __arm__                       //Compila solo si se encuentra dentro del Raspberry Pi(procesador arm)

#include <wiringPi.h>
#include <wiringSerial.h>
#endif
#define HIGHLIGHT(__O__) std::cout<<"\e[1;31m"<<__O__<<"\e[0m"<<std::endl   //Colorear las funciones en el terminal
#define EM(__O__) std::cout<<"\e[1;30;1m"<<__O__<<"\e[0m"<<std::endl
int fd;
int fd2;
#include "Vision.h"                   //Libreria y funciones de vision para engranes

using namespace sio; //Workspace de Sockets.io
using namespace std; //Workspace de std
using namespace cv; //Workspace de opEnCV

std::mutex _lock; //Workspace de multithreading
std::condition_variable_any _cond;
bool connect_finish = false;
string servidorIP = "127.0.0.1";
string puerto = "3000";
vector<uchar> buf; //Buffer para guardar los datos de la imagen
std::string encoded, encodedprocesada, s, tipo;
std::time_t tt;
bool datos = false;
//Variables para el envio de datos
const size_t bufferSize = JSON_ARRAY_SIZE(3) + JSON_OBJECT_SIZE(6);
DynamicJsonBuffer Bufferentrada(bufferSize);
DynamicJsonBuffer Buffersalida(bufferSize);
JsonObject& datoenvioarduino = Buffersalida.createObject();

std::string cadenapararduino;

const size_t bufferSizeeq2 = JSON_ARRAY_SIZE(3) + JSON_OBJECT_SIZE(2);
DynamicJsonBuffer Bufferentradaeq2(bufferSizeeq2);
DynamicJsonBuffer Buffersalidaeq2(bufferSizeeq2);
JsonObject& datoenvioarduinoeq2 = Buffersalidaeq2.createObject();

std::string cadenapararduinoeq2;

bool iniciocadena = false, fincadena = false;
bool iniciocadenaeq2 = false, fincadenaeq2 = false;

/*
 *  Clase para conectar el listener, para aguardar por eventos
 */
class connection_listener {
    sio::client &handler;

public:

    connection_listener(sio::client& h) :
    handler(h) {
    }

    void on_connected() {
        _lock.lock();
        _cond.notify_all();
        connect_finish = true;
        _lock.unlock();
        std::cout << "Servidor conectado correctamente" << std::endl;
    }

    void on_close(client::close_reason const& reason) {
        std::cout << "sio closed " << std::endl;
        exit(0);
    }

    void on_fail() {
        std::cout << "TFM- SISTEMAS CYBERFISICOSio failed " << std::endl;
        exit(0);
    }
};

socket::ptr current_socket; //Api de socket, el Socket que maneja todos los eventos de Socket.io

void eventos() {
    current_socket->on("datos", sio::socket::event_listener_aux([&](string
            const& name, message::ptr const& data, bool isAck, message::list & ack_resp) {
        _lock.lock(); //Bloquear la ejecucion hasta realizar una opcion
        std::vector<std::shared_ptr < message>> vectoringresojson = data -> get_vector(); //Creo vector para el ingreso de datos
        for (int i = 0; i < vectoringresojson.size(); i++) {
            std::map<std::string, message::ptr> mapa = vectoringresojson.at(i)->get_map();
                    std::cout << "Vector ingreso json a mapa" << std::endl;
            if (mapa.find("dispositivo") != mapa.end()) {
                if (mapa.find("dispositivo") != mapa.end()) {
                    std::cout << "Dispositivo: " << mapa.find("dispositivo")->second->get_int() << std::endl;
                            datoenvioarduino["dispositivo"] = mapa.find("dispositivo")->second->get_int();
                }
                if (mapa.find("motor") != mapa.end()) {
                    std::cout << "Motor: " << mapa.find("motor")->second->get_int() << std::endl;
                            datoenvioarduino["motor"] = mapa.find("motor")->second->get_int();
                }
                if (mapa.find("presencia") != mapa.end()) {
                    std::cout << "Presencia: " << mapa.find("presencia")->second->get_bool() << std::endl;
                            datoenvioarduino["presencia"] = mapa.find("presencia")->second->get_bool();
                }
                if (mapa.find("estado") != mapa.end()) {
                    std::cout << "estado: " << mapa.find("estado")->second->get_int() << std::endl;
                            signed int datoestado = mapa.find("estado")->second->get_int();
                            datoenvioarduino["estado"] = datoestado;
                }
                if (mapa.find("imagenprocesada") != mapa.end()) {
                    std::cout << "Imagen Procesada: " << mapa.find("imagenprocesada")->second->get_bool() << std::endl;;
                            datoenvioarduino["imagenprocesada"] = mapa.find("imagenprocesada")->second->get_bool();
                }
                if (mapa.find("clasificador") != mapa.end()) {
                    std::cout << "Clasificador: " << mapa.find("clasificador")->second->get_bool() << std::endl;
                            datoenvioarduino["clasificador"] = mapa.find("clasificador")->second->get_bool();
                }
                if (mapa.find("rgb") != mapa.end()) {
                    std::cout << "a" << std::endl;
                            std::vector<sio::message::ptr> vectorrgb = mapa.find("rgb")->second->get_vector();
                            std::cout << "Vector rgb: " << vectorrgb.size();
                    if (vectorrgb.size() == 3) {
                        std::cout << vectorrgb.at(0)->get_int() << std::endl;
                                JsonArray& rgb = datoenvioarduino["rgb"];
                                int rgb0 = vectorrgb.at(0)->get_int(); // 255
                                int rgb1 = vectorrgb.at(1)->get_int(); // 255
                                int rgb2 = vectorrgb.at(2)->get_int(); // 255
                    }
                }
            } else {
                /* NUEVO EQUIPO*/
                if (mapa.find("equipo2") != mapa.end()) {
                    std::cout << "EQUIPO2 : " << mapa.find("equipo2")->second->get_bool() << std::endl;
                            datoenvioarduinoeq2["equipo2"] = mapa.find("equipo2")->second->get_bool();
                }
                if (mapa.find("led") != mapa.end()) {
                    std::cout << "LED : " << mapa.find("led")->second->get_bool() << std::endl;
                            datoenvioarduinoeq2["led"] = mapa.find("led")->second->get_bool();
                }
            }
            /*FIN DE NUEVO EQUIPO*/
            std::cout << "Cadena para arduino: ";
                    cadenapararduino = "";
                    datoenvioarduino.printTo(cadenapararduino);
                    cadenapararduino += std::string("\0"); //Fin de cadena
                    const char *cstr = cadenapararduino.c_str();

                    cadenapararduinoeq2 = "";
                    datoenvioarduinoeq2.printTo(cadenapararduinoeq2);
                    cadenapararduinoeq2 += std::string("\0"); //Fin de cadena
                    const char *cstr2 = cadenapararduinoeq2.c_str();

                    std::cout << cstr << std::endl;
                    std::cout << cstr2 << std::endl;
#ifdef __arm__
                    serialPuts(fd, cstr);
                    serialPuts(fd2, cstr2);
#endif
        }
        _lock.unlock(); //Desbloquear la ejecucion para seguir con el programa
    }));
    current_socket->on("imagen", sio::socket::event_listener_aux([&](string
            const& name, message::ptr const& data, bool isAck, message::list & ack_resp) {

        _lock.lock(); //Bloquear la ejecucion hasta realizar una opcion
        std::cout << "Llego una imagen" << std::endl;
        _lock.unlock(); //Desbloquear la ejecucion para seguir con el programa
    }));
    current_socket->on("nuevousuario", sio::socket::event_listener_aux([&](string
            const& name, message::ptr const& data, bool isAck, message::list & ack_resp) {
        _lock.lock(); //Bloquear la ejecucion hasta realizar una opcion
        std::vector<std::shared_ptr < message>> vectoringresojson = data -> get_vector(); //Creo vector para el ingreso de datos
        std::cout << "Inicializando datos" << std::endl;
        for (int i = 0; i < vectoringresojson.size(); i++) {
            std::map<std::string, message::ptr> mapa = vectoringresojson.at(i)->get_map();
                    std::cout << "Vector ingreso json a mapa" << std::endl;
            if (mapa.find("dispositivo") != mapa.end()) {
                if (mapa.find("dispositivo") != mapa.end()) {
                    std::cout << "Dispositivo: " << mapa.find("dispositivo")->second->get_int() << std::endl;
                            datoenvioarduino["dispositivo"] = mapa.find("dispositivo")->second->get_int();
                }
                if (mapa.find("motor") != mapa.end()) {
                    std::cout << "Motor: " << mapa.find("motor")->second->get_int() << std::endl;
                            datoenvioarduino["motor"] = mapa.find("motor")->second->get_int();
                }
                if (mapa.find("presencia") != mapa.end()) {
                    std::cout << "Presencia: " << mapa.find("presencia")->second->get_bool() << std::endl;
                            datoenvioarduino["presencia"] = mapa.find("presencia")->second->get_bool();
                }
                if (mapa.find("estado") != mapa.end()) {
                    std::cout << "estado: " << mapa.find("estado")->second->get_int() << std::endl;
                            signed int datoestado = mapa.find("estado")->second->get_int();
                            datoenvioarduino["estado"] = datoestado;
                }
                if (mapa.find("imagenprocesada") != mapa.end()) {
                    std::cout << "Imagen Procesada: " << mapa.find("imagenprocesada")->second->get_bool() << std::endl;;
                            datoenvioarduino["imagenprocesada"] = mapa.find("imagenprocesada")->second->get_bool();
                }
                if (mapa.find("clasificador") != mapa.end()) {
                    std::cout << "Clasificador: " << mapa.find("clasificador")->second->get_bool() << std::endl;
                            datoenvioarduino["clasificador"] = mapa.find("clasificador")->second->get_bool();
                }
                if (mapa.find("rgb") != mapa.end()) {
                    std::cout << "a" << std::endl;
                            std::vector<sio::message::ptr> vectorrgb = mapa.find("rgb")->second->get_vector();
                            std::cout << "Vector rgb: " << vectorrgb.size();
                    if (vectorrgb.size() == 3) {
                        std::cout << vectorrgb.at(0)->get_int() << std::endl;
                                JsonArray& rgb = datoenvioarduino["rgb"];
                                int rgb0 = vectorrgb.at(0)->get_int(); // 255
                                int rgb1 = vectorrgb.at(1)->get_int(); // 255
                                int rgb2 = vectorrgb.at(2)->get_int(); // 255
                    }
                }
            } else {
                /* NUEVO EQUIPO*/
                if (mapa.find("equipo2") != mapa.end()) {
                    std::cout << "EQUIPO2 : " << mapa.find("equipo2")->second->get_bool() << std::endl;
                            datoenvioarduinoeq2["equipo2"] = mapa.find("equipo2")->second->get_bool();
                }
                if (mapa.find("led") != mapa.end()) {
                    std::cout << "LED : " << mapa.find("led")->second->get_bool() << std::endl;
                            datoenvioarduinoeq2["led"] = mapa.find("led")->second->get_bool();
                }
            }
            /*FIN DE NUEVO EQUIPO*/
            std::cout << "Cadena para arduino: ";
                    cadenapararduino = "";
                    datoenvioarduino.printTo(cadenapararduino);
                    cadenapararduino += std::string("\0"); //Fin de cadena
                    const char *cstr = cadenapararduino.c_str();

                    cadenapararduinoeq2 = "";
                    datoenvioarduinoeq2.printTo(cadenapararduinoeq2);
                    cadenapararduinoeq2 += std::string("\0"); //Fin de cadena
                    const char *cstr2 = cadenapararduinoeq2.c_str();

                    std::cout << cstr << std::endl;
                    std::cout << cstr2 << std::endl;
#ifdef __arm__
                    serialPuts(fd, cstr);
                    serialPuts(fd2, cstr2);
#endif
        }
        _lock.unlock(); //Desbloquear la ejecucion para seguir con el programa
    }));
}

//Separar string con delimitador
// manejamos por interfaz de usuario ejemplo: motor,225, led,0.......

std::vector<std::string> split(std::string strToSplit, char delimeter) {
    std::stringstream ss(strToSplit);
    std::string item;
    std::vector<std::string> splittedStrings;
    while (std::getline(ss, item, delimeter)) {
        splittedStrings.push_back(item);
    }
    return splittedStrings;
}

void ayuda() {
    HIGHLIGHT("Ayuda, no hay suficientes argumentos");
    std::cout << "Opciones validas" << std::endl;
    std::cout << "--s <ip> especifica la dirección IP servidor" << std::endl;
    std::cout << "--p <puerto> especifica puerto del servidor" << std::endl;
}

int main(int argc, const char* args[]) {
    if (argc > 2) { //Para cambiar el puerto y el servidor desde el terminal
        for (int j = 0; j < argc; j++) {

            if (strcmp(args[j], "--s") == 0) {
                std::cout << "Cambio servidor" << std::endl;
                if ((j + 1) <= argc) servidorIP = std::string(args[j + 1]);
                else ayuda();
                std::cout << "Servidor IP: " << servidorIP << std::endl;
            } else if (strcmp(args[j], "--p") == 0) {
                std::cout << "Cambio puerto" << std::endl;
                if ((j + 1) <= argc) puerto = std::string(args[j + 1]);
                else ayuda();
            }
        }
    } else ayuda();
#ifdef __arm__
    if ((fd = serialOpen("/dev/ttyACM0", 115200)) < 0) {
        fprintf(stderr, "No se puede abrir el dispositivo serial EQUIPO1, revise los permisos!: %s\n", strerror(errno));
        return 1;
    }
    if ((fd2 = serialOpen("/dev/ttyUSB0", 115200)) < 0) {

        fprintf(stderr, "No se puede abrir el EQUIPO 2 serial, revise los permisos!: %s\n", strerror(errno));
        return 1;    }

    if (wiringPiSetup() == -1) {
        // fprintf(stdout, "No se puede inicializar wiringPi: %s\n", strerror(errno));
        return 1;
    }
#endif

    sio::client h; //Creación de un nuevo cliente de Sockets.io
    connection_listener l(h); //Añado al cliente un listener para obtener eventos
    h.set_open_listener(std::bind(&connection_listener::on_connected, &l));
    h.set_close_listener(std::bind(&connection_listener::on_close, &l, std::placeholders::_1));
    h.set_fail_listener(std::bind(&connection_listener::on_fail, &l));
    std::cout << "Corriendo sobre el servidor " + servidorIP + ":" + puerto << std::endl;
    h.connect("http://" + servidorIP + ":" + puerto); //Conexión  al servidor Web

    _lock.lock();
    if (!connect_finish) {
        _cond.wait(_lock);
    }
    _lock.unlock();
    current_socket = h.socket(); //Socket para inicio de comunicacion

    std::vector<std::string> cadenaseparada, extensionarchivo; //Variables para separar string, una para separar la entrada de texto, otra para obtener la extension del archivo
    sio::message::ptr mensajeunico(sio::object_message::create()); //Objetos para enviar datos en Formato JSON
    sio::message::ptr mensajeimagen(sio::object_message::create());

    std::map<std::string, sio::message::ptr>& map = mensajeunico->get_map(); //Punteros hacia los objetos anteriores
    std::map<std::string, sio::message::ptr>& mapimagen = mensajeimagen->get_map();

    array_message::ptr mensajetotal(sio::array_message::create()); //Crear un array de objetos, para enviar varios datos a la vez
    std::vector<std::shared_ptr < sio::message>> &vectortotal = mensajetotal->get_vector(); //Variable estandar con puntero al anterior objeto array_message

    eventos(); //mandar a llamar una vez, obligatorio
    const String rutared = "parametrosred.xml";
    /*red = cv::ml::ANN_MLP::load(rutared);
    if (red->empty()) {
        std::cout << "No hay red" << std::endl;
        return -1;
    }*/
    datosprueba = Mat(1, entradared.height * entradared.width, CV_32F, Scalar(0));
#ifdef __arm__
    std::cout << "Corriendo sobre un dispostivo arm" << std::endl;
    std::string cadenatotaldesdearduino = "";
    std::string cadenatotaldesdearduinoeq2 = "";
    if (!cap.isOpened()) {
        std::cout << "\033[1;31m No esta conectada la camara al RPi, conectele por favor \033[0m" << std::endl;
        return -1;
    }
    bool sensorpresencia = false;
    char c;
    char z;
    bool llegodatos = false;
    bool llegodatoseq2 = false;
    while (1) {
        cap >> imagen;
        llegodatos= false;
        while (serialDataAvail(fd) > 0) {
            c = serialGetchar(fd);
            std::cout << c;
            if (c == '{') {
                iniciocadena = true;
                cadenatotaldesdearduino = "";
            }
            if (iniciocadena) {
                cadenatotaldesdearduino += std::string(1, c);
                if (c == '}') {
                    fincadena = true;
                    std::cout << "Caracter }" << std::endl;
                    break;
                }
            }
        }
        if (iniciocadena && fincadena) {
            iniciocadena = false, fincadena = false;
            std::cout << "Procesando JSON" << std::endl;
            llegodatos = false;
            JsonObject& datojson = Bufferentrada.parseObject(cadenatotaldesdearduino);
            std::cout << "Cadena que llega Arduino: " << cadenatotaldesdearduino << std::endl;
            cadenatotaldesdearduino = "";
            if (datojson.success()) {
                map.clear();
                for (auto kv : datojson) {
                    if (strcmp(kv.key, ("presencia")) == 0) {
                        map.insert(std::make_pair("presencia",
                                sio::bool_message::create(kv.value.as<bool>())));
                        if (kv.value.as<bool>()) {
                            std::cout << "Presencia: true" << std::endl;
                            sensorpresencia = true;
                        } else {
                            std::cout << "Presencia: false" << std::endl;
                            sensorpresencia = false;
                        }
                    }
                    if (strcmp(kv.key, ("estado")) == 0) {
                        map.insert(std::make_pair("estado",
                                sio::int_message::create(kv.value.as<signed int>())));
                    }
                }
                vectortotal.push_back(mensajeunico);
                current_socket->emit("datos", mensajetotal);
                vectortotal.clear();
            }
        }
        if (sensorpresencia) {
            //Cuando la camara tiene compensacion automatica de exposicion capturamos siete imagenes hasta que se estabilice
            for (int k = 0; k < 4; k++) {
                cap >> imagen;
            }
            bool resultado = procesarengrane();
            imencode(".png", imagen, buf); //Codifico la imagen en PNG y le paso a un Buffer de memoria
            s = std::string(buf.begin(), buf.end()); //Transformo el buffer a string
            encoded = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); //Convierto esa String a String en Base64
            tipo = "png";
            imencode(".png", roi, buf); //Codifico la imagen en PNG y le paso a un Buffer de memoria
            s = std::string(buf.begin(), buf.end()); //Transformo el buffer a string
            encodedprocesada = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); //Convierto esa String a String en Base64                           mapimagen.insert(std::make_pair("cadena64", sio::string_message::create(encoded))); //Incluyo el valor de la cadena, con un identificador cadena64
            chrono::system_clock::time_point today = chrono::system_clock::now(); //Obtengo el tiempo actual
            tt = chrono::system_clock::to_time_t(today); //Convierto a tiempo estandar
            std::cout << "today is: " << ctime(&tt);
            mapimagen.insert(std::make_pair("cadena64", sio::string_message::create(encoded))); //Incluyo el valor de la cadena, con un identificador cadena64
            mapimagen.insert(std::make_pair("cadena64procesada", sio::string_message::create(encodedprocesada))); //Incluyo el valor de la cadena, con un identificador cadena64
            mapimagen.insert(std::make_pair("extension", sio::string_message::create(tipo))); //Incluyo la extension adecuada
            mapimagen.insert(std::make_pair("fecha", sio::string_message::create(ctime(&tt)))); //Guardo como formato estandar compatible con JavaScript
            mapimagen.insert(std::make_pair("errores", sio::string_message::create(errores))); //Guardo como formato estandar compatible con JavaScript
            mapimagen.insert(std::make_pair("numerodientes", sio::int_message::create(crestastotales.size() + dientesperdidos))); //Dientes engrane
            mapimagen.insert(std::make_pair("modulo", sio::double_message::create(modulo))); //Dientes engrane
            mapimagen.insert(std::make_pair("paso", sio::double_message::create(paso))); //Dientes engrane
            mapimagen.insert(std::make_pair("diametroexterno", sio::double_message::create(2 * radioexterior * constanteconversionpxacm))); //Dientes engrane

            current_socket->emit("imagen", mensajeimagen); //Envio los datos
            mapimagen.clear();
            cadenapararduino = "";

            cadenapararduino += std::string("\0"); //Caracter terminacion
            const char *cstr = cadenapararduino.c_str();
            std::cout << "Cadena de imagen procesada " << cstr << std::endl;
            serialPuts(fd, cstr); //Envio que realizo la vision
            std::cout << "Fin Vision" << std::endl;
            sensorpresencia = false;

        }
        //NUEVO DISPOSITIVO
        llegodatoseq2=false;
        while (serialDataAvail(fd2) > 0) {
            z = serialGetchar(fd2);
            std::cout << z;
            if (z == '{') {
                iniciocadenaeq2 = true;
                cadenatotaldesdearduinoeq2 = "";
            }
            if (iniciocadena) {
                cadenatotaldesdearduinoeq2 += std::string(1, z);
                if (c == '}') {
                    fincadenaeq2 = true;
                    std::cout << "Caracter }" << std::endl;
                    break;
                }
            }
        }
        if (iniciocadenaeq2 && fincadenaeq2) {
            iniciocadenaeq2 = false, fincadenaeq2 = false;
            std::cout << "Procesando JSON" << std::endl;
            llegodatoseq2 = false;
            JsonObject& datojson = Bufferentradaeq2.parseObject(cadenatotaldesdearduinoeq2);
            std::cout << "Cadena que llega Arduino: " << cadenatotaldesdearduinoeq2 << std::endl;
            cadenatotaldesdearduinoeq2 = "";
            if (datojson.success()) {
                map.clear();
                for (auto kv : datojson) {
                    if (strcmp(kv.key, ("led")) == 0) {
                        map.insert(std::make_pair("led",
                                sio::bool_message::create(kv.value.as<bool>())));
                        if (kv.value.as<bool>()) {
                            std::cout << "led: true" << std::endl;
                        } else {
                            std::cout << "led: false" << std::endl;

                        }
                    }
                }
                vectortotal.push_back(mensajeunico);
                current_socket->emit("datos", mensajetotal);
                vectortotal.clear();
            }
        }
    }
#else
    std::cout << "Corriendo en un computador x86-64" << std::endl;
    HIGHLIGHT("Manual: Ponga el identificador seguido del valor, ejemplo:");
    EM(" motor,255; estado, 0; presencia,0; clasificador,0; Valores permitidos:motor(0-255), piston(0,1), presencia(1,0), led(1,0), imagen ,ruta/a/imagen.gif;");
    for (std::string line; std::getline(std::cin, line);) {
        if (line.length() > 0) {
            if (line == "$exit") {
                std::cout << "Salir" << std::endl;
                //  break;
            } else if (line.length() > 4 && line.length() < 300) { //Si tiene un tamaño estándar
                cadenaseparada = split(line, ','); //Separe las opciones
                if (cadenaseparada.size() % 2 == 0) { //Si las opciones son divisibles para dos quiere decir que se puso el identificador y el valor
                    for (int i = 0; i < cadenaseparada.size(); i += 2) {
                        if (cadenaseparada.at(i) == "dispositivo") { //Si es el identificador motor
                            datos = true;
                            map.insert(std::make_pair("dispositivo",
                                    sio::int_message::create(stoi(cadenaseparada.at(i + 1))))); //Crea el Par nombre:actuadorMotor
                            std::cout << "Dispositivo" << std::endl;
                        } else if (cadenaseparada.at(i) == "motor") {
                            datos = true;
                            map.insert(std::make_pair("motor",
                                    sio::int_message::create(stoi(cadenaseparada.at(i + 1)))));
                            std::cout << "Motor" << std::endl;
                        } else if (cadenaseparada.at(i) == "presencia") {
                            datos = true;
                            if (cadenaseparada.at(i + 1) == "true") {
                                map.insert(std::make_pair("presencia",
                                        sio::bool_message::create(true)));
                            } else {
                                map.insert(std::make_pair("presencia",
                                        sio::bool_message::create(false)));
                            }
                            std::cout << "Presencia" << std::endl;
                        } else if (cadenaseparada.at(i) == "estado") {
                            datos = true;
                            map.insert(std::make_pair("estado",
                                    sio::int_message::create(stoi(cadenaseparada.at(i + 1)))));
                            std::cout << "Estado" << std::endl;
                        } else if (cadenaseparada.at(i) == "imagenprocesada") {
                            datos = true;
                            if (cadenaseparada.at(i + 1) == "true") {
                                map.insert(std::make_pair("imagenprocesada",
                                        sio::bool_message::create(true)));
                            } else {
                                map.insert(std::make_pair("imagenprocesada",
                                        sio::bool_message::create(false)));
                            }
                        } else if (cadenaseparada.at(i) == "clasificador") {
                            datos = true;
                            if (cadenaseparada.at(i + 1) == "true") {
                                map.insert(std::make_pair("clasificador",
                                        sio::bool_message::create(true)));
                            } else {
                                map.insert(std::make_pair("clasificador",
                                        sio::bool_message::create(false)));
                            }
                        } else if (cadenaseparada.at(i) == "imagen") { //Si es imagen
                            if (cadenaseparada.at(i + 1) == "0") { //Si es cero saca imagen de la camara
                                std::cout << "camara" << std::endl;
                                cap.open(1);
                                //Saque imagen de la camara del Computador
                                cap.open(1);
                                cap >> imagen; //Guardo la imagen de la cámara del PC en la matriz
                                procesarengrane();
                                imencode(".png", imagen, buf); //Codifico la imagen en PNG y le paso a un Buffer de memoria
                                s = std::string(buf.begin(), buf.end()); //Transformo el buffer a string
                                encoded = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); //Convierto esa String a String en Base64
                                tipo = "png";
                                imencode(".png", roi, buf); //Codifico la imagen en PNG y le paso a un Buffer de memoria
                                s = std::string(buf.begin(), buf.end()); //Transformo el buffer a string
                                encodedprocesada = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); //Convierto esa String a String en Base64
                                cap.release();
                            } else {
                                std::cout << "Archivo " << std::endl;
                                std::cout << cadenaseparada.at(i + 1) << std::endl;
                                tipo = split(cadenaseparada.at(i + 1), '.').at(1); //Obtengo la extension del archivo
                                std::cout << "Tipo: " << tipo << endl;
                                if (tipo == "png" || tipo == "jpg" || tipo == "jpeg" || tipo == "bmp") {
                                    imagen = imread(cadenaseparada.at(i + 1));
                                    if (imagen.empty()) {
                                        std::cout << "Mala ruta de la imagen" << std::endl;
                                        return -1;
                                    }
                                    procesarengrane();
                                    imencode(".png", imagen, buf); //Codifico la imagen en PNG y le paso a un Buffer de memoria
                                    s = std::string(buf.begin(), buf.end()); //Transformo el buffer a string
                                    encoded = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); //Convierto esa String a String en Base64
                                    tipo = "png";
                                    imencode(".png", roi, buf); //Codifico la imagen en PNG y le paso a un Buffer de memoria
                                    s = std::string(buf.begin(), buf.end()); //Transformo el buffer a string
                                    encodedprocesada = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); //Convierto esa String a String en Base64
                                } else {
                                    ifstream in(cadenaseparada.at(i + 1), ios::binary); //Abro el archivo en forma binaria, en la ruta especificada
                                    in.seekg(0, ios::end); //Itero sobre todo el archivo
                                    int iSize = in.tellg(); //Obtengo el tamaño del Archivo
                                    in.seekg(0, ios::beg);
                                    std::vector<char> pBuff(iSize); //Creo un buffer del tamaño del archivo
                                    if (iSize > 0)
                                        in.read(&pBuff[0], iSize); //Pongo los datos de la imagen en el buffer
                                    in.close();
                                    std::string s(pBuff.begin(), pBuff.end()); //Creo un String con todos los elementos del Buffer
                                    encoded = base64_encode(reinterpret_cast<const unsigned char*> (s.c_str()), s.length()); ///Convierto la cadena a un String de Base64
                                }

                            }
                            chrono::system_clock::time_point today = chrono::system_clock::now(); //Obtengo el tiempo actual
                            tt = chrono::system_clock::to_time_t(today); //Convierto a tiempo estandar
                            mapimagen.insert(std::make_pair("cadena64", sio::string_message::create(encoded))); //Incluyo el valor de la cadena, con un identificador cadena64
                            mapimagen.insert(std::make_pair("cadena64procesada", sio::string_message::create(encodedprocesada))); //Incluyo el valor de la cadena, con un identificador cadena64
                            mapimagen.insert(std::make_pair("extension", sio::string_message::create(tipo))); //Incluyo la extension adecuada
                            mapimagen.insert(std::make_pair("fecha", sio::string_message::create(ctime(&tt)))); //Guardo como formato estandar compatible con JavaScript
                            mapimagen.insert(std::make_pair("errores", sio::string_message::create(errores))); //Guardo como formato estandar compatible con JavaScript
                            mapimagen.insert(std::make_pair("numerodientes", sio::int_message::create(crestastotales.size() + dientesperdidos))); //Dientes engrane
                            mapimagen.insert(std::make_pair("modulo", sio::double_message::create(modulo))); //Dientes engrane
                            mapimagen.insert(std::make_pair("paso", sio::double_message::create(paso))); //Dientes engrane
                            mapimagen.insert(std::make_pair("diametroexterno", sio::double_message::create(2 * radioexterior * constanteconversionpxacm))); //Dientes engrane
                            current_socket->emit("imagen", mensajeimagen); //Envio los datos
                            mapimagen.clear();
                        }
                    }
                }
                if (datos) {
                    vectortotal.push_back(mensajeunico); //Ingresa al vector como ultimo de la cola
                    std::cout << "*=======sacando valores del vector final=======*" << std::endl; //Si hay valores en el vector, llene
                    std::cout << "tamaño: " << vectortotal.size() << std::endl;
                    current_socket->emit("datos", mensajetotal); //Envie los datos en un solo vector
                    vectortotal.clear();
                    map.clear(); //Reinicio las variables
                    datos = false;
                }
                cadenaseparada.clear();
                _lock.lock();
                _lock.unlock();
            } else {
                vectortotal.clear();
                map.clear();
                cadenaseparada.clear();
            }
        }
    }
#endif
    h.close(); //Cerrar servidor
    return 0;
}
